---
- name: Create an application server with site
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - .env  
  vars:
    ansible_python_interpreter: "/Applications/miniconda3/bin/python"

  tasks:
    - name: create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ network }}"
        region: "{{ aws_region }}"
        state: present
        dns_hostnames: yes
        dns_support: yes
        multi_ok: no
        tags:
          Name: "{{ vpc_name }}"
      register: vpc

    - name: associate subnet to the VPC
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        cidr: "{{ subnet_cidr }}"
        map_public: yes
        az: "{{ subnet }}"
        resource_tags:
          Name: "{{ vpc_name }}"
        wait: yes
      register: subnet

    - name: create IGW
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        tags:
          Name: "{{ vpc_name }}_igw"
      register: igw

    - name: Route table for public Subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ vpc_name }}_public_rt"

    - name: Create security group
      ec2_group:
        name: "{{ vpc_name }} VPC SG"
        description: "{{ vpc_name }} VPC SG"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        rules:
          - proto: tcp
            ports:
            - 80
            - 22
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Create server
      amazon.aws.ec2_instance:
        image_id: "{{ aws_ubuntu_ami }}"
        wait: yes
        instance_type: "{{ server_type }}"
        region: "{{ aws_region }}"
        security_group: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        key_name: "{{ keypair }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_type: gp3
              volume_size: "{{ server_volume_size }}"
              delete_on_termination: true
        tags:
          Name: "{{ server_name }}"
          Environment: "{{ env }}"
        exact_count: 1
        wait_timeout: 300
        network:
          assign_public_ip: yes
        state: running
      register: server_ec2

    - name: Ensure instance is running
      amazon.aws.ec2_instance:
        instance_ids: "{{ server_ec2.instance_ids }}"
        region: "{{ aws_region }}"
        state: running
      register: ensure_running

    - name: get ip of instance
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ server_name }}"
          instance-state-name: [ "running"]
      register: ec2_data

    - name: Add server public IP to application host group
      add_host: hostname={{ ec2_data.instances[0].public_ip_address }} groups=app

    - name: Add Public IP definition to vars file
      ansible.builtin.lineinfile:
        path: devops-project.env
        regexp: 'server_id: '
        line: 'server_id: {{ ec2_data.instances[0].instance_id }}'
        state: present
        create: True

    # Wait until port 22 is available to my IP address
    - name: Wait for SSH to start using external IP
      wait_for:
        host: "{{ ec2_data.instances[0].public_ip_address }}"
        port: 22
        timeout: 300

- name: Setup app server
  hosts: app
  user: ubuntu
  become: True
  gather_facts: False
  vars_files:
    - docker.env
  tasks:
    - name: Create /opt/app directory
      file:
        path: /opt/app
        state: directory
        mode: '0755'

    - name: Copy all application files to /opt/app
      copy:
        src: ./ 
        dest: /opt/app/
        mode: '0755'  

    - name: add GPG key_name
      ansible.builtin.shell: wget -qO - https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: true

    - name: Start Docker
      ansible.builtin.service:
        name: "docker"
        enabled: true
        state: started

    - name: Copy file with owner permissions
      ansible.builtin.copy:
        src: ~/.ssh/id_rsa
        dest: ~/.ssh/id_rsa
        mode: '0600'

    - name: Build Docker image and push to DockerHub
      ansible.builtin.shell: "{{ item }}"
      args:
        chdir: /opt/app/
      with_items:
        - docker login -u {{ docker_user }} -p {{ docker_token }}
        - docker build . -t {{ docker_user }}/my-ansible-image:latest
        - docker push {{ docker_user }}/my-ansible-image:latest


    - name: Start application using docker-compose
      ansible.builtin.shell: docker compose up -d
      args:
        chdir: /opt/app/
      register: compose_output

